//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.09.24 at 03:56:01 PM CEST 
//


package com.nex.gamebook.xsd;

import ae.javax.xml.bind.annotation.XmlEnum;
import ae.javax.xml.bind.annotation.XmlEnumValue;
import ae.javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for bonusState.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="bonusState">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="before_fight"/>
 *     &lt;enumeration value="after_fight"/>
 *     &lt;enumeration value="normal"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "bonusState")
@XmlEnum
public enum BonusState {


    /**
     * 
     * 						Bonus will be applied before fight.
     * 					
     * 
     */
    @XmlEnumValue("before_fight")
    BEFORE_FIGHT("before_fight"),

    /**
     * 
     * 						Bonus will be applied after fight.
     * 					
     * 
     */
    @XmlEnumValue("after_fight")
    AFTER_FIGHT("after_fight"),

    /**
     * 
     * 						
     * <pre>
     * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;html:p xmlns:html="http://www.w3.org/1999/xhtml" xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;Default value.&lt;/html:p&gt;
     * </pre>
     * 
     * 						
     * <pre>
     * &lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;html:p xmlns:html="http://www.w3.org/1999/xhtml" xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;When section has enemies this bonus will be ignored.&lt;/html:p&gt;
     * </pre>
     * 
     * 					
     * 
     */
    @XmlEnumValue("normal")
    NORMAL("normal");
    private final String value;

    BonusState(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static BonusState fromValue(String v) {
        for (BonusState c: BonusState.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
